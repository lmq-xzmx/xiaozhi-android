package info.dourok.voicebot.ui

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import info.dourok.voicebot.config.ActivationState
import info.dourok.voicebot.ui.components.ActivationGuideDialog
import java.util.*

@Composable
fun ChatScreen(
    viewModel: ChatViewModel = hiltViewModel()
) {
    val messages by viewModel.display.chatFlow.collectAsState()
    val emotion by viewModel.display.emotionFlow.collectAsState()
    val deviceState by viewModel.deviceStateFlow.collectAsState()
    val initializationStatus by viewModel.initializationStatus.collectAsState()
    val activationState by viewModel.activationState.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val isConnecting by viewModel.isConnecting.collectAsState()
    
    var showActivationDialog by remember { mutableStateOf(false) }
    var activationCode by remember { mutableStateOf("") }
    var frontendUrl by remember { mutableStateOf("") }
    
    // Ëá™Âä®ÂêØÂä®ÂàùÂßãÂåñ
    LaunchedEffect(Unit) {
        viewModel.startInitialization()
    }
    
    // ÁõëÂê¨ÊøÄÊ¥ªÁä∂ÊÄÅÂèòÂåñ
    LaunchedEffect(activationState) {
        when (val currentState = activationState) {
            is ActivationState.NeedsActivation -> {
                activationCode = currentState.activationCode
                frontendUrl = currentState.frontendUrl ?: "http://47.122.144.73:8002/#/home"
                showActivationDialog = true
            }
            is ActivationState.Activated -> {
                showActivationDialog = false
            }
            else -> {
                // ÂÖ∂‰ªñÁä∂ÊÄÅ‰∏çÊòæÁ§∫ÊøÄÊ¥ªÂØπËØùÊ°Ü
            }
        }
    }
    
    // Ê†πÊçÆÂàùÂßãÂåñÁä∂ÊÄÅÊòæÁ§∫‰∏çÂêåÂÜÖÂÆπ
    when (initializationStatus) {
        is InitializationStatus.NotStarted,
        is InitializationStatus.InProgress -> {
            InitializationScreen(
                isConnecting = isConnecting,
                status = initializationStatus
            )
        }
        is InitializationStatus.Failed -> {
            ErrorScreen(
                error = (initializationStatus as InitializationStatus.Failed).error,
                onRetry = { viewModel.startInitialization() }
            )
        }
        is InitializationStatus.NeedsActivation -> {
            // ÊòæÁ§∫ÊøÄÊ¥ªÁ≠âÂæÖÁïåÈù¢
            ActivationWaitingScreen(
                activationCode = (initializationStatus as InitializationStatus.NeedsActivation).activationCode,
                onShowDialog = { showActivationDialog = true }
            )
        }
        is InitializationStatus.Completed -> {
            ChatContent(
                messages = messages,
                emotion = emotion,
                deviceState = deviceState,
                errorMessage = errorMessage,
                viewModel = viewModel
            )
        }
    }
    
    // ÊøÄÊ¥ªÂºïÂØºÂØπËØùÊ°Ü
    if (showActivationDialog && activationCode.isNotEmpty()) {
        ActivationGuideDialog(
            activationCode = activationCode,
            frontendUrl = frontendUrl,
            activationManager = hiltViewModel<ChatViewModel>().activationManager,
            onActivationComplete = { websocketUrl ->
                showActivationDialog = false
                viewModel.onActivationComplete(websocketUrl)
            },
            onDismiss = {
                showActivationDialog = false
            }
        )
    }
}

@Composable
fun ActivationWaitingScreen(
    activationCode: String,
    onShowDialog: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üîó",
            style = MaterialTheme.typography.displayLarge
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Text(
            text = "ËÆæÂ§áÈúÄË¶ÅÊøÄÊ¥ª",
            style = MaterialTheme.typography.headlineSmall,
            color = MaterialTheme.colorScheme.primary
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = "ÊÇ®ÁöÑËÆæÂ§áÂ∞öÊú™ÊøÄÊ¥ªÔºåÈúÄË¶ÅÂú®ÁÆ°ÁêÜÈù¢Êùø‰∏≠ÂÆåÊàêÁªëÂÆö",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = androidx.compose.ui.text.style.TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "ÊøÄÊ¥ªÁ†Å",
                    style = MaterialTheme.typography.labelMedium,
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Text(
                    text = activationCode,
                    style = MaterialTheme.typography.headlineLarge,
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
            }
        }
        
        Spacer(modifier = Modifier.height(32.dp))
        
        Button(
            onClick = onShowDialog,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("ÂºÄÂßãÊøÄÊ¥ª")
        }
    }
}

@Composable
fun InitializationScreen(
    isConnecting: Boolean,
    status: InitializationStatus
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        CircularProgressIndicator(
            modifier = Modifier.size(64.dp),
            strokeWidth = 4.dp,
            color = MaterialTheme.colorScheme.primary
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Text(
            text = when (status) {
                is InitializationStatus.NotStarted -> "ÂáÜÂ§áÂàùÂßãÂåñ..."
                is InitializationStatus.InProgress -> "Ê≠£Âú®ÂàùÂßãÂåñËÅäÂ§©ÂäüËÉΩ..."
                else -> "ÂàùÂßãÂåñ‰∏≠..."
            },
            style = MaterialTheme.typography.headlineSmall,
            textAlign = androidx.compose.ui.text.style.TextAlign.Center
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = "Ê≠£Âú®Ê£ÄÊü•ËÆæÂ§áÊøÄÊ¥ªÁä∂ÊÄÅÂπ∂ÈÖçÁΩÆËØ≠Èü≥ÂäüËÉΩ\nËØ∑Á®çÂÄô...",
            style = MaterialTheme.typography.bodyMedium,
            textAlign = androidx.compose.ui.text.style.TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )
    }
}

@Composable
fun ErrorScreen(
    error: String,
    onRetry: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üòû",
            style = MaterialTheme.typography.displayLarge
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Text(
            text = "ÂàùÂßãÂåñÂ§±Ë¥•",
            style = MaterialTheme.typography.headlineSmall,
            color = MaterialTheme.colorScheme.error
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = error,
            style = MaterialTheme.typography.bodyMedium,
            textAlign = androidx.compose.ui.text.style.TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )
        
        Spacer(modifier = Modifier.height(32.dp))
        
        Button(
            onClick = onRetry,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("ÈáçËØï")
        }
    }
}

@Composable
fun ChatContent(
    messages: List<Message>,
    emotion: String,
    deviceState: DeviceState,
    errorMessage: String?,
    viewModel: ChatViewModel
) {
    // Emotion to emoji mapping
    val emotionEmojiMap = mapOf(
        "neutral" to "üòê",
        "happy" to "üòä",
        "laughing" to "üòÇ",
        "funny" to "ü§°",
        "sad" to "üò¢",
        "angry" to "üò†",
        "crying" to "üò≠",
        "loving" to "ü•∞",
        "embarrassed" to "üò≥",
        "surprised" to "üòÆ",
        "shocked" to "üò±",
        "thinking" to "ü§î",
        "winking" to "üòâ",
        "cool" to "üòé",
        "relaxed" to "üòå",
        "delicious" to "üòã",
        "kissy" to "üòò",
        "confident" to "üòè",
        "sleepy" to "üò¥",
        "silly" to "ü§™",
        "confused" to "üòï"
    )
    
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Emotion display at top center with bigger emoji
        Box(
            modifier = Modifier.padding(vertical = 16.dp),
            contentAlignment = Alignment.Center
        ) {
            when (deviceState) {
                DeviceState.CONNECTING, DeviceState.STARTING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(64.dp), // ‰∏éemojiÂ§ßÂ∞èÂåπÈÖç
                        strokeWidth = 4.dp,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                else -> {
                    Text(
                        text = emotionEmojiMap[emotion.lowercase(Locale.getDefault())] ?: "üòê",
                        style = androidx.compose.ui.text.TextStyle(
                            fontSize = 64.sp,
                            lineHeight = 64.sp
                        )
                    )
                }
            }
        }

        // Device State Text
        Text(
            text = when (deviceState) {
                DeviceState.IDLE -> "‚úÖ Â∞±Áª™"
                DeviceState.LISTENING -> "üé§ ÁõëÂê¨‰∏≠"
                DeviceState.SPEAKING -> "üîä ÂõûÂ§ç‰∏≠"
                DeviceState.CONNECTING -> "üîó ËøûÊé•‰∏≠"
                DeviceState.STARTING -> "‚ö° ÂêØÂä®‰∏≠"
                DeviceState.ACTIVATING -> "üîê ÊøÄÊ¥ª‰∏≠"
                DeviceState.FATAL_ERROR -> "‚ùå ÈîôËØØ"
                DeviceState.UPGRADING -> "üì¶ ÂçáÁ∫ß‰∏≠"
                DeviceState.WIFI_CONFIGURING -> "üì∂ ÈÖçÁΩÆÁΩëÁªú"
                DeviceState.UNKNOWN -> "‚ùì Êú™Áü•Áä∂ÊÄÅ"
            },
            style = MaterialTheme.typography.bodySmall,
            color = when (deviceState) {
                DeviceState.FATAL_ERROR -> MaterialTheme.colorScheme.error
                DeviceState.IDLE -> MaterialTheme.colorScheme.primary
                DeviceState.LISTENING -> MaterialTheme.colorScheme.primary
                DeviceState.SPEAKING -> MaterialTheme.colorScheme.secondary
                else -> MaterialTheme.colorScheme.onSurface
            },
            modifier = Modifier.padding(bottom = 8.dp)
        )
        
        // Error message display
        errorMessage?.let { error ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.errorContainer
                )
            ) {
                Text(
                    text = error,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onErrorContainer,
                    modifier = Modifier.padding(12.dp)
                )
            }
        }

        LazyColumn(
            modifier = Modifier.weight(1f),
            reverseLayout = true,
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(messages.asReversed()) { message ->
                ChatMessageItem(message)
            }
        }
        
        // Êìç‰ΩúÊåâÈíÆÂå∫ÂüüÊîπ‰∏∫Áä∂ÊÄÅÊòæÁ§∫Âå∫Âüü
        ChatActionButtons(
            deviceState = deviceState
        )
    }
}

@Composable
fun ChatMessageItem(message: Message) {
    val isCurrentUser = message.sender == "user"

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp),
        horizontalArrangement = if (isCurrentUser) Arrangement.End else Arrangement.Start
    ) {
        Card(
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(
                containerColor = if (isCurrentUser)
                    MaterialTheme.colorScheme.primary
                else
                    MaterialTheme.colorScheme.surfaceVariant
            ),
            modifier = Modifier.widthIn(max = 300.dp)
        ) {
            Column(
                modifier = Modifier.padding(12.dp)
            ) {
                Text(
                    text = message.sender,
                    style = MaterialTheme.typography.labelLarge,
                    color = if (isCurrentUser)
                        MaterialTheme.colorScheme.onPrimary
                    else
                        MaterialTheme.colorScheme.onSurfaceVariant
                )
                Text(
                    text = message.message,
                    style = MaterialTheme.typography.bodyMedium,
                    color = if (isCurrentUser)
                        MaterialTheme.colorScheme.onPrimary
                    else
                        MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.padding(top = 4.dp)
                )
                Text(
                    text = message.nowInString,
                    style = MaterialTheme.typography.labelSmall,
                    color = if (isCurrentUser)
                        MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)
                    else
                        MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f),
                    modifier = Modifier
                        .padding(top = 4.dp)
                        .align(Alignment.End)
                )
            }
        }
    }
}

@Composable
fun ChatActionButtons(
    deviceState: DeviceState
) {
    // ESP32ÂÖºÂÆπÔºöÂÆåÂÖ®ÁßªÈô§ÊâãÂä®ÊåâÈíÆÔºåÊâìÊñ≠Êú∫Âà∂ÂÆåÂÖ®Ëá™Âä®Âåñ
    // Âè™ÊòæÁ§∫ËÆæÂ§áÁä∂ÊÄÅ‰ø°ÊÅØÔºå‰∏çÊèê‰æõ‰ªª‰ΩïÊâãÂä®ÊéßÂà∂ÊåâÈíÆ
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        colors = CardDefaults.cardColors(
            containerColor = when (deviceState) {
                DeviceState.LISTENING -> MaterialTheme.colorScheme.primaryContainer
                DeviceState.SPEAKING -> MaterialTheme.colorScheme.secondaryContainer
                DeviceState.CONNECTING, DeviceState.STARTING -> MaterialTheme.colorScheme.tertiaryContainer
                DeviceState.FATAL_ERROR -> MaterialTheme.colorScheme.errorContainer
                else -> MaterialTheme.colorScheme.surfaceVariant
            }
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {
            when (deviceState) {
                DeviceState.IDLE -> {
                    Icon(
                        imageVector = Icons.Default.CheckCircle,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        tint = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "‚úÖ Â∞±Áª™ - ESP32ÂÖºÂÆπÊ®°Âºè",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                DeviceState.CONNECTING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üîó ËøûÊé•‰∏≠...",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                }
                DeviceState.LISTENING -> {
                    Icon(
                        imageVector = Icons.Default.Mic,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        tint = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üé§ Ëá™Âä®ÁõëÂê¨‰∏≠ - ËØ≠Èü≥ÊâìÊñ≠",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                }
                DeviceState.SPEAKING -> {
                    Icon(
                        imageVector = Icons.Default.VolumeUp,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        tint = MaterialTheme.colorScheme.onSecondaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üîä Êí≠Êîæ‰∏≠ - ËØ¥ËØùÂç≥ÂèØÊâìÊñ≠",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSecondaryContainer
                    )
                }
                DeviceState.STARTING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "‚ö° Ê≠£Âú®ÂêØÂä®...",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                }
                DeviceState.ACTIVATING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üîê ËÆæÂ§áÊøÄÊ¥ª‰∏≠...",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                }
                DeviceState.FATAL_ERROR -> {
                    Icon(
                        imageVector = Icons.Default.Error,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        tint = MaterialTheme.colorScheme.onErrorContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "‚ùå Á≥ªÁªüÈîôËØØ",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onErrorContainer
                    )
                }
                DeviceState.UPGRADING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üì¶ Á≥ªÁªüÂçáÁ∫ß‰∏≠...",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                }
                DeviceState.WIFI_CONFIGURING -> {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "üì∂ ÈÖçÁΩÆÁΩëÁªú...",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onTertiaryContainer
                    )
                }
                DeviceState.UNKNOWN -> {
                    Icon(
                        imageVector = Icons.Default.Help,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "‚ùì Êú™Áü•Áä∂ÊÄÅ",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
}
